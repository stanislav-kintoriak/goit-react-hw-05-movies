{"version":3,"file":"static/js/870.051fe7e3.chunk.js","mappings":"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","sources":["api/api.js","components/PopularMoviesList/MoviesList.jsx","components/pages/Movies/MoviesPage.styled.jsx","components/pages/Movies/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = '592c5fa13d6af61a1d8c8304650d9e60'\n\nconst DEFAULT_IMAGE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/495px-No-Image-Placeholder.svg.png?20200912122019'\n\n\n\n// Функція, що дістає список популярних фільмів\nexport const getPopularMovies = async pageNumber  => {\n\nconst data = await axios (\n    `${API_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n\n\n  return data;\n}\n\n\n// Функція, яка запитує дані з Api за пошуковим запитом\n\n\nexport const getMoviesByQuery = async (query,pageNumber) => {\n    const data = await axios(\n        `${API_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n          pageNumber ? pageNumber : 1\n        }`\n      );\n\n\n    return data;\n}\n\n// Функція, яка повертає дані про фільм\n\nexport const getMoviesDetails = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name,\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMAGE,\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMAGE,\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '',\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n\n\n// Функція, яка повертає дані про фільм отримуючи id\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${API_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n\n// Функція, яка повертає дані про акторів отримуючи id фільму\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${API_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\n\n\nexport const getActorInfoData = actorsArr => {\n  return actorsArr.map(actor => {\n    const actorInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMAGE,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMAGE,\n      character: actor.character,\n      id: actor.id,\n    };\n    return actorInfo;\n  });\n};\n\n\n// Функція, яка повертає дані про відгуки отримуючи id фільму\n\nexport const getReviews = async id => {\n  const data = await axios(\n    `${API_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\n\n\n\n\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      author: review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n\nexport const getMovieDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMAGE, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMAGE, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};","import PropTypes from 'prop-types';\nconst { useLocation, Link } = require('react-router-dom');\n\nconst MoviesList = ({ movies }) => {\n          const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => {\n\n\n        return (<li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              <h3>{movie.title}</h3>\n          </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      w300imgUrl: PropTypes.string.isRequired,\n      w500imgUrl: PropTypes.string.isRequired,\n      year: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\nexport const Head = styled.div`\n  display: flex;\n  align-content: center;\n  justify-content: center;\n  gap: 25px;\n  max-width: 1280px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 14px;\n  padding-right: 14px;\n  & h1 {\n    margin: 0;\n    padding: 0;\n  }\n\n  @media (min-width: 768px) {\n    width: 768px;\n  }\n  @media (min-width: 1280px) {\n    width: 1280px;\n  }\n`;\n\nexport const Form = styled.form`\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 400px;\n  background-color: #fff;\n  border: 1px solid #000000;\n\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchInput = styled.input`\n  margin: 0 auto;\n  width: 100%;\n  height: 25px;\n\n  padding: 0 25px;\n  font-size: 16px;\n  border-radius: 3px;\n  border: none;\n  outline: none;\n  transition: 0.35s ease;\n  & :focus,\n  &:hover,\n  &:not(:placeholder-shown) {\n    color: #000000;\n  }\n  &:hover::placeholder {\n    color: #000000;\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  float: right;\n  width: 70px;\n  height: 45px;\n  top: 0px;\n  right: px;\n  border: none;\n  background-color: transparent;\n  transition: transform 250ms cubic-bezier(0.5, 0, 0.1, 1);\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    transform: scale(1.1);\n    outline: none;\n  }\n`;","import { useState, useMemo, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport { getMoviesByQuery, getMoviesDetails } from '../../../api/api';\nimport { useSearchParams } from 'react-router-dom';\nimport Loader from '../../Loader/Loader';\n// import ButtonLoadMore from '../../LoadMore/LoadMoreButton';\nimport MoviesList from '../../PopularMoviesList/MoviesList';\nimport {\n  Form,\n  SearchInput,\n  SearchBtn,\n  Head,\n} from './MoviesPage.styled';\n\n\nconst MoviesPage = () => {\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  // const [totalPages, settTotalPages] = useState(0);\n  const [totalResults, setTotalResults] = useState(0);\n  const [error, setError] = useState(false);\n\n  const { query, page } = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { value } = e.currentTarget.elements.query;\n    if (!value.trim()) {\n      Notiflix.Notify.failure('Sorry, incorect query. Please try again.');\n      return;\n    }\n    if(value !== searchParams.query){\n      setMovies([])\n    }\n    setSearchParams({ query: value, page: 1 });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    setIsloading(true);\n\n    getMoviesByQuery(query, page)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error: ${response.status}`);\n        }\n\n        if (!response.data.results.length) {\n          setError(true);\n          console.log('Error', response.data.total_results);\n          setIsloading(false);\n          return console.log(\n            'There is no movies with this request.'\n          );\n        }\n        setError(false);\n        // settTotalPages(response.data.total_pages);\n        setTotalResults(response.data.total_results);\n\n\n        setMovies(prevState => [\n          ...prevState,\n          ...getMoviesDetails(response.data.results),\n        ]);\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [query, page, searchParams]);\n\n  // const onLoadMore = () => {\n  //   const previoudPage = searchParams.get('page') ?? 1;\n  //   const query = searchParams.get('query');\n  //   setSearchParams({ query, page: Number(previoudPage) + 1 });\n  // };\n\n  return (\n    <>\n    <Head>\n      <h1>Searching movies</h1>\n      <Form onSubmit={handleSubmit}>\n        <SearchInput type=\"text\" name=\"query\" autoComplete=\"off\" autoFocus />\n        <SearchBtn type=\"submit\">\nSearch\n        </SearchBtn>\n      </Form>\n    </Head>\n    {isLoading && <Loader />}\n    {!error && query && totalResults && (\n      <>\n        <MoviesList movies={movies} />\n        {/* {page < totalPages && <ButtonLoadMore onLoadMore={onLoadMore} />} */}\n      </>\n    )}\n  </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["API_URL","API_KEY","DEFAULT_IMAGE","getPopularMovies","pageNumber","axios","data","getMoviesByQuery","query","getMoviesDetails","moviesArr","map","movie","title","name","w300imgUrl","poster_path","w500imgUrl","year","release_date","slice","first_air_date","id","getMovieById","getCastInfo","getActorInfoData","actorsArr","actor","original_name","profile_path","character","getReviews","getReviewsInfo","reviewsArr","review","author","content","getMovieDetails","cutGenres","genres","elem","length","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview","require","useLocation","Link","movies","location","to","state","from","Head","styled","Form","SearchInput","SearchBtn","useState","setMovies","isLoading","setIsloading","useSearchParams","searchParams","setSearchParams","totalResults","setTotalResults","error","setError","useMemo","Object","fromEntries","page","useEffect","then","response","status","Error","results","console","log","total_results","prevState","catch","e","finally","onSubmit","preventDefault","value","currentTarget","elements","trim","Notiflix","type","autoComplete","autoFocus","Loader","MoviesList"],"sourceRoot":""}