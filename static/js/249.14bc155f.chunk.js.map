{"version":3,"file":"static/js/249.14bc155f.chunk.js","mappings":"mZAEMA,EAAU,+BACVC,EAAU,mCAEVC,EAAgB,uIAKTC,EAAgB,mCAAG,WAAMC,GAAN,wFAEbC,EAAAA,EAAAA,GAAK,UACjBL,EADiB,uCACqBC,EADrB,iBAElBG,GAA0B,IAJA,cAE1BE,EAF0B,yBASvBA,GATuB,2CAAH,sDAgBhBC,EAAgB,mCAAG,WAAOC,EAAMJ,GAAb,wFACTC,EAAAA,EAAAA,GAAM,GAAD,OACjBL,EADiB,iCACeC,EADf,iCAC+CO,EAD/C,iBAElBJ,GAA0B,IAHJ,cACtBE,EADsB,yBAQrBA,GARqB,2CAAH,wDAahBG,EAAmB,SAAAC,GAC9B,OAAOA,EAAUC,KAAI,SAAAC,GAAU,IAAD,EAc5B,MAbkB,CAChBC,MAAOD,EAAMC,MAAQD,EAAMC,MAAQD,EAAME,KACzCC,WAAYH,EAAMI,YAAN,yCAC0BJ,EAAMI,aACxCd,EACJe,WAAYL,EAAMI,YAAN,yCAC0BJ,EAAMI,aACxCd,EACJgB,KAAMN,EAAMO,aACRP,EAAMO,aAAaC,MAAM,EAAG,IACvB,OAALR,QAAK,IAALA,GAAA,UAAAA,EAAOS,sBAAP,eAAuBD,MAAM,EAAG,KAAM,GAC1CE,GAAIV,EAAMU,GAGb,GACF,EAKYC,EAAY,mCAAG,WAAMD,GAAN,wFACPjB,EAAAA,EAAAA,GAAM,GAAD,OACnBL,EADmB,kBACFsB,EADE,oBACYrB,EADZ,oBADE,cACpBK,EADoB,yBAKnBA,GALmB,2CAAH,sDAUZkB,EAAW,mCAAG,WAAMF,GAAN,wFACNjB,EAAAA,EAAAA,GAAM,GAAD,OACnBL,EADmB,kBACFsB,EADE,4BACoBrB,IAFnB,cACnBK,EADmB,yBAKlBA,GALkB,2CAAH,sDAUXmB,EAAmB,SAAAC,GAC9B,OAAOA,EAAUf,KAAI,SAAAgB,GAYnB,MAXkB,CAChBb,KAAMa,EAAMb,KAAOa,EAAMb,KAAOa,EAAMC,cACtCb,WAAYY,EAAMX,YAAN,yCAC0BW,EAAME,cACxC3B,EACJe,WAAYU,EAAME,aAAN,yCAC0BF,EAAME,cACxC3B,EACJ4B,UAAWH,EAAMG,UACjBR,GAAIK,EAAML,GAGb,GACF,EAKYS,EAAU,mCAAG,WAAMT,GAAN,wFACLjB,EAAAA,EAAAA,GAAM,GAAD,OACnBL,EADmB,kBACFsB,EADE,4BACoBrB,IAFpB,cAClBK,EADkB,yBAIjBA,GAJiB,2CAAH,sDAUV0B,EAAiB,SAAAC,GAC5B,OAAOA,EAAWtB,KAAI,SAAAuB,GAMpB,MALmB,CACjBC,OAAQD,EAAOC,OACfC,QAASF,EAAOE,QAChBd,GAAIY,EAAOZ,GAGd,GACF,EAGYe,EAAkB,SAAAzB,GAAU,IAAD,EAElC0B,EADAC,EAAS3B,EAAM2B,OAAO5B,KAAI,SAAA6B,GAAI,OAAIA,EAAK1B,IAAT,IASlC,OANEwB,EADoB,IAAlBC,EAAOE,OACG,QACHF,EAAOE,QAAU,EACdF,EAAOG,KAAK,MAEf,UAAMH,EAAOnB,MAAM,EAAG,GAAGsB,KAAK,MAA9B,WAEJ,CACL7B,MAAOD,EAAMC,MAAQD,EAAMC,MAAQD,EAAME,KACzC6B,cAAe/B,EAAMgC,eACrBC,WAAYjC,EAAMiC,WAClBC,KAAMlC,EAAMmC,aACZC,MAAOpC,EAAMqC,WACblC,WAAYH,EAAMI,YAAN,yCAC0BJ,EAAMI,aACxCd,EACJe,WAAYL,EAAMI,YAAN,yCAC0BJ,EAAMI,aACxCd,EACJqC,OAAQD,EACRY,MAAOtC,EAAMuC,SACbjC,KAAMN,EAAMO,aACRP,EAAMO,aAAaC,MAAM,EAAG,IACvB,OAALR,QAAK,IAALA,GAAA,UAAAA,EAAOS,sBAAP,eAAuBD,MAAM,EAAG,KAAM,GAE7C,C,qICrJYgC,E,QAAeC,EAAAA,GAAH,omB,SC8BvB,EA7Be,SAAC,GAET,IAAD,IADJ1B,MAASb,EACL,EADKA,KAAMC,EACX,EADWA,WAAYE,EACvB,EADuBA,WAAYa,EACnC,EADmCA,UAEvC,OACE,UAACsB,EAAD,YACE,gBACEE,OAAM,UAAKvC,EAAL,kBAAyBE,EAAzB,SACNsC,MAAO,qDACPC,IAAKvC,EACLwC,IAAK3C,EACL4C,QAAQ,UAEV,4BACE,0BAAI,IAAE5C,MACN,uBAAIgB,SAIX,ECwBH,EApCa,WACX,IAAQ6B,GAAYC,EAAAA,EAAAA,MAAZD,QACV,GAA+BE,EAAAA,EAAAA,UAAS,IAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBE,OAdFC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IAEbzC,EAAAA,EAAAA,IAAYmC,GACTQ,MAAK,SAAAC,GACJ,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAJ,iBAAoBF,EAASC,SAErCN,GAAYtC,EAAAA,EAAAA,IAAiB2C,EAAS9D,KAAKiE,MAC5C,IACAC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,EAAlB,IACPG,SAAQ,kBAAMX,GAAa,EAAnB,GACZ,GAAE,CAACN,KAGA,+BACC,2BACEK,IAAa,SAACa,EAAA,EAAD,IACbf,EAASrB,OAChBqB,EAASnD,KAAI,SAAAgB,GAAK,OAAI,SAAC,EAAD,CAAyBA,MAAOA,GAAjBA,EAAML,GAAzB,KAGV,wBAAI,iCAKX,C","sources":["api/api.js","components/Cast/CastItem/CastItem.styled.jsx","components/Cast/CastItem/CastItem.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = '592c5fa13d6af61a1d8c8304650d9e60'\n\nconst DEFAULT_IMAGE = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/495px-No-Image-Placeholder.svg.png?20200912122019'\n\n\n\n// Функція, що дістає список популярних фільмів\nexport const getPopularMovies = async pageNumber  => {\n\nconst data = await axios (\n    `${API_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n\n\n  return data;\n}\n\n\n// Функція, яка запитує дані з Api за пошуковим запитом\n\n\nexport const getMoviesByQuery = async (query,pageNumber) => {\n    const data = await axios(\n        `${API_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n          pageNumber ? pageNumber : 1\n        }`\n      );\n\n\n    return data;\n}\n\n// Функція, яка повертає дані про фільм\n\nexport const getMoviesDetails = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name,\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMAGE,\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMAGE,\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '',\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n\n\n// Функція, яка повертає дані про фільм отримуючи id\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${API_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n\n// Функція, яка повертає дані про акторів отримуючи id фільму\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${API_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\n\n\nexport const getActorInfoData = actorsArr => {\n  return actorsArr.map(actor => {\n    const actorInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMAGE,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMAGE,\n      character: actor.character,\n      id: actor.id,\n    };\n    return actorInfo;\n  });\n};\n\n\n// Функція, яка повертає дані про відгуки отримуючи id фільму\n\nexport const getReviews = async id => {\n  const data = await axios(\n    `${API_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\n\n\n\n\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      author: review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n\nexport const getMovieDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMAGE, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMAGE, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};","import styled from '@emotion/styled';\n\nexport const CastItemCard = styled.li`\n  cursor: pointer;\n  transition: all 250ms linear;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  height: 100%;\n  overflow: hidden;\n\n  & img {\n    display: block;\n    width: 20%;\n    height: 20%;\n    object-fit: cover;\n    @media (min-width: 768px) {\n      height: 80%;\n    }\n  }\n  & div {\n    padding: 10px;\n  }\n  & h4,\n  & p {\n    margin-bottom: 0;\n    margin-top: 5px;\n    padding: 0;\n    @media (max-width: 768px) {\n      font-size: 24px;\n    }\n  }\n`;","import PropTypes from 'prop-types';\nimport { CastItemCard } from './CastItem.styled';\n\nconst CastItem = ({\n    actor: { name, w300imgUrl, w500imgUrl, character },\n  }) => {\n    return (\n      <CastItemCard>\n        <img\n          srcSet={`${w300imgUrl} 300w, ${w500imgUrl} 500w`}\n          sizes={'(max-width: 767px) 300px, (min-width: 768px) 500px'}\n          src={w500imgUrl}\n          alt={name}\n          loading=\"lazy\"\n        />\n        <div>\n          <h4> {name}</h4>\n          <p>{character}</p>\n        </div>\n      </CastItemCard>\n    );\n  };\n  CastItem.propTypes = {\n    actor: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      w300imgUrl: PropTypes.string.isRequired,\n      w500imgUrl: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    }).isRequired,\n  };\n  \n  export default CastItem;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastInfo, getActorInfoData } from '../../api/api';\nimport Loader from 'components/Loader/Loader';\nimport CastItem from './CastItem/CastItem'\n\n\n\n\nconst Cast = () => {\n  const { movieId } = useParams();\nconst [castInfo,setCastInfo] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\n\n\n\nuseEffect(() => {\n  setIsLoading(true);\n\n  getCastInfo(movieId)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      setCastInfo(getActorInfoData(response.data.cast));\n    })\n    .catch(e => console.error(e))\n    .finally(() => setIsLoading(false));\n}, [movieId]);\n\n  return (\n    <>\n     <div>\n      {isLoading && <Loader />}\n      {castInfo.length ? (\ncastInfo.map(actor => <CastItem key={actor.id} actor={actor} />)\n\n      ) : (\n        <h3>There is no info here...</h3>\n      )}\n    </div>\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["API_URL","API_KEY","DEFAULT_IMAGE","getPopularMovies","pageNumber","axios","data","getMoviesByQuery","query","getMoviesDetails","moviesArr","map","movie","title","name","w300imgUrl","poster_path","w500imgUrl","year","release_date","slice","first_air_date","id","getMovieById","getCastInfo","getActorInfoData","actorsArr","actor","original_name","profile_path","character","getReviews","getReviewsInfo","reviewsArr","review","author","content","getMovieDetails","cutGenres","genres","elem","length","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview","CastItemCard","styled","srcSet","sizes","src","alt","loading","movieId","useParams","useState","castInfo","setCastInfo","isLoading","setIsLoading","useEffect","then","response","status","Error","cast","catch","e","console","error","finally","Loader"],"sourceRoot":""}